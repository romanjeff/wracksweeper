%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% LOG FILE:       ./MOOSLog_3_3_2021_____00_21_43/MOOSLog_3_3_2021_____00_21_43._moos
%% FILE OPENED ON  Thu Jan  1 00:00:00 1970
%% LOGSTART                47.584524921
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
ServerHost = localhost
ServerPort = 9000
Community  = uuuv

GlobalLogPath = "/media/store/data/"

//------------------------------------------
// Antler configuration  block
ProcessConfig = ANTLER
{
  MSBetweenLaunches = 200

  //////////////////
  // CORE COMPONENTS
  //////////////////

  Run = MOOSDB	         @ NewConsole = false
  Run = pLogger	         @ NewConsole = false
  Run = iRiptideMicroUUV @ NewConsole = false
//BOSCH//  Run = pNav             @ NewConsole = false
   Run = pNav             @ NewConsole = false
  Run = pMarinePID       @ NewConsole = false
  Run = uRiptideOLEDDisplay @ NewConsole = false
     Run = iRiptideSpartonIMU @ NewConsole = false
  Run = pRiptideMOOSMonitor @ NewConsole = false
  Run = pRiptideSimpleSafety @ NewConsole = false

  //////////////////////
  // OPTIONAL COMPONENTS
  //////////////////////

//DVL//  Run = iDVL @ NewConsole = false, InhibitMOOSParams=true, ExtraProcessParams=DVLParams
//DVL//  DVLParams = /opt/riptide/config/configfiles/dvl.moos, iDVL

//IXBLUEC3//  Run = iRiptideiXbluePHINSC3 @ NewConsole = false, InhibitMOOSParams=true, ExtraProcessParams=INSParams
//IXBLUEC3//  INSParams = /opt/riptide/config/configfiles/ixblue_c3.moos


//  Run = pAcommsHandler @ NewConsole =false, InhibitMOOSParams=true, ExtraProcessParams=AcommsParams
// NOTE: uncomment only one AcommsParams line for the correct modem
//  AcommsParams = /opt/riptide/config/configfiles/whoi_acomms.moos
//  AcommsParams = /opt/riptide/config/configfiles/seatrac_acomms.moos
//  AcommsParams = /opt/riptide/config/configfiles/benthos_acomms.moos

//  Run = iRiptideRBRLegatoCTD @ NewConsole = false, InhibitMOOSParams=true, ExtraProcessParams=CTDParams
//  CTDParams = /opt/riptide/config/configfiles/rbr_legato_ctd.moos

//  Run = iRiptideSeabirdGPCTD @ NewConsole = false, InhibitMOOSParams=true, ExtraProcessParams=CTDParams
//  CTDParams = /opt/riptide/config/configfiles/seabird_gpctd.moos

}



//------------------------------------------
// pMarinePID config block

ProcessConfig = pMarinePID
{
  AppTick    = 20
  CommsTick  = 20

  verbose       = true
  depth_control = true
  // uncomment the following two lines to automatically enable active roll control
  // use_roll_control = true
  // default_roll_angle = 0.0 // radians

  // SIM_INSTABILITY = 20
  TARDY_HELM_THRESHOLD = 5

  // comment out the following to stop loggin PID data
  PID_LOG_PATH = "/media/store/data/pid/"

  // Yaw PID controller
//UUUV//  yaw_pid_kp		 = 0.5     //5.0 //1.2
//UUUV//  yaw_pid_kd		 = 0.207   //7.0 //0.0
   yaw_pid_kp		 = 0.3     //5.0 //1.2
   yaw_pid_kd		 = 0.0     //7.0 //0.0
//2MP//  yaw_pid_kp		 = 0.5     //5.0 //1.2
//2MP//  yaw_pid_kd		 = 0.0     //7.0 //0.0
//RT12//  yaw_pid_kp		 = 0.5     //5.0 //1.2
//RT12//  yaw_pid_kd		 = 0.0     //7.0 //0.0
  yaw_pid_ki		 = 0.0    //0.1 //0.3
  yaw_pid_integral_limit = 0.0175  //15.0 //0.07

  // Speed PID controller
  speed_pid_kp		 = 1.0
  speed_pid_kd		 = 0.0
  speed_pid_ki		 = 0.0
  speed_pid_integral_limit = 0.07

  //Pitch PID controller
//UUUV//  pitch_pid_kp                  = 0.6    //1.5
//UUUV//  pitch_pid_kd                  = 0.2277  // 0.038 // 0.38 // 0.4 //1.0
   pitch_pid_kp                  = 0.9    //1.5
   pitch_pid_kd                  = 0.05  // 0.038 // 0.38 // 0.4 //1.0
//2MP//  pitch_pid_kp                  = 0.7    //1.5
//2MP//  pitch_pid_kd                  = 0.25  // 0.038 // 0.38 // 0.4 //1.0
//RT12//  pitch_pid_kp                  = 0.8    //1.5
//RT12//  pitch_pid_kd                  = 0.24  // 0.038 // 0.38 // 0.4 //1.0
  pitch_pid_ki                   = 0
  pitch_pid_integral_limit       = 0.1    //0

  //ZPID controller
//UUUV//  z_to_pitch_pid_kp             = 0.1   //0.12
//UUUV//  z_to_pitch_pid_kd              = 0
//UUUV//  z_to_pitch_pid_ki              = 0.0   //0.004
//UUUV//  z_to_pitch_pid_integral_limit  = 0.1    //0.05

   z_to_pitch_pid_kp              = 0.7   //0.12
   z_to_pitch_pid_kd              = 0
   z_to_pitch_pid_ki              = 0.0   //0.004
   z_to_pitch_pid_integral_limit  = 0.25    //0.05

//2MP//  z_to_pitch_pid_kp              = 0.3   //0.12
//2MP//  z_to_pitch_pid_kd              = 0
//2MP//  z_to_pitch_pid_ki              = 0.01   //0.004
//2MP//  z_to_pitch_pid_integral_limit  = 0.08    //0.05

//RT12//  z_to_pitch_pid_kp              = 0.25   //0.12
//RT12//  z_to_pitch_pid_kd              = 0.05
//RT12//  z_to_pitch_pid_ki              = 0.001   //0.004
//RT12//  z_to_pitch_pid_integral_limit  = 0.05    //0.05

  //Roll PID controller
  roll_pid_kp              = 0.02
  roll_pid_kd              = 0.0
  roll_pid_ki              = 0.0    //0.004
  roll_pid_integral_limit  = 0.1    //0.05


  //MAXIMUMS (in degrees)
  maxrudder    = 15
  maxthrust    = 100  // (maxthrust/speed_factor)=max vehicle speed (m/s)
  maxpitch     = 20
  maxelevator  = 18
  maxtwist     = 3

  // A non-zero SPEED_FACTOR overrides use of SPEED_PID
  // Will set DESIRED_THRUST = DESIRED_SPEED * SPEED_FACTOR
//UUUV//      speed_factor = 10
//UUUV// //FOCESC// speed_factor = 1   // use MOTOR_MAP for speed
   speed_factor = 10
//2MP//  speed_factor = 10
//RT12//  speed_factor = 40

  // Controlling dive behavior from the surface
//UUUV//  enable_dive = true               // set to true to enable
//UUUV//  dive_min_heading_error = 10.0    // (deg) start dive when heading is within this error of desired
//UUUV//  dive_max_heading_error = 45.0    // (deg) stop dive when heading is outside this error of desired
//UUUV//  dive_rudder_scale_factor = 0.2   // [0,1] - multiplier for maxrudder during dives
//UUUV//  dive_twist_scale_factor = 0.2    // [0,1] - multiplier for maxtwist during dives
//UUUV//  dive_max_depth_threshold = 0.75  // (m) - vehicle must be < this depth to be diving
//UUUV//  dive_min_desired_depth = 0.9     // (m) - desired depth >= this value to be diving
//UUUV//  dive_max_elevator = 25.0         // (deg) - modify max elevator deflection during dives
//UUUV//  dive_z_to_pitch_pid_kp = 0.0     // modified depth PID Kp, 0 = use normal value

   enable_dive = true               // set to true to enable
  dive_min_heading_error = 10.0    // (deg) start dive when heading is within this error of desired
   dive_max_heading_error = 45.0    // (deg) stop dive when heading is outside this error of desired
   dive_rudder_scale_factor = 0.2   // [0,1] - multiplier for maxrudder during dives
   dive_twist_scale_factor = 0.2    // [0,1] - multiplier for maxtwist during dives
   dive_max_depth_threshold = 0.75  // (m) - vehicle must be < this depth to be diving
   dive_min_desired_depth = 0.9     // (m) - desired depth >= this value to be diving
   dive_max_elevator = 25.0         // (deg) - modify max elevator deflection during dives
   dive_z_to_pitch_pid_kp = 0.0     // modified depth PID Kp, 0 = use normal value

//2MP//  enable_dive = true               // set to true to enable
//2MP//  dive_min_heading_error = 10.0    // (deg) start dive when heading is within this error of desired
//2MP//  dive_max_heading_error = 45.0    // (deg) stop dive when heading is outside this error of desired
//2MP//  dive_rudder_scale_factor = 0.2   // [0,1] - multiplier for maxrudder during dives
//2MP//  dive_twist_scale_factor = 0.2    // [0,1] - multiplier for maxtwist during dives
//2MP//  dive_max_depth_threshold = 0.75  // (m) - vehicle must be < this depth to be diving
//2MP//  dive_min_desired_depth = 0.9     // (m) - desired depth >= this value to be diving
//2MP//  dive_max_elevator = 25.0         // (deg) - modify max elevator deflection during dives
//2MP//  dive_z_to_pitch_pid_kp = 0.0     // modified depth PID Kp, 0 = use normal value

//RT12//  enable_dive = true               // set to true to enable
//RT12//  dive_min_heading_error = 360.0   // (deg) start dive when heading is within this error of desired
//RT12//  dive_max_heading_error = 360.0   // (deg) stop dive when heading is outside this error of desired
//RT12//  dive_rudder_scale_factor = 0.0   // [0,1] - multiplier for maxrudder during dives
//RT12//  dive_twist_scale_factor = 0.2    // [0,1] - multiplier for maxtwist during dives
//RT12//  dive_max_depth_threshold = 0.75  // (m) - vehicle must be < this depth to be diving
//RT12//  dive_min_desired_depth = 0.9     // (m) - desired depth >= this value to be diving
//RT12//  dive_max_elevator = 15.0         // (deg) - modify max elevator deflection during dives
//RT12//  dive_z_to_pitch_pid_kp = 0.0     // modified depth PID Kp, 0 = use normal value

}



ProcessConfig = iRiptideMicroUUV
{
  // run the application at 20Hz
  AppTick = 20
  CommsTick = 20

  //MK2//  MK2 = TRUE
  // IRIDIUM_SBD = TRUE
  //FOCESC// FOC_ESC = TRUE

  // whether the IMU is managed by iRiptideMicroUUV
      IMU_PRESENT = FALSE

  TARDY_CMD_THRESHOLD = 5

  MAX_FIN_ANGLE = 25

  // Configure zero point of each fin, if needed (degrees)
  // Warning: This must match the actual vehicle hardware
  //STARBOARD_FIN_ZERO = 0
  //PORT_FIN_ZERO = 0
  //DORSAL_FIN_ZERO = 0

  // configure the max and min thrust if needed
  //MAX_THRUST_PERCENTAGE = 100
  //MIN_THRUST_PERCENTAGE = 0

  // Flip the fin rotational direction depending on mounting
  // Warning: This must match the actual vehicle hardware
  //FLIP_STARBOARD_FIN = 0
  //FLIP_PORT_FIN = 0
  //FLIP_DORSAL_FIN = 0

  // If the dorsal fin is a different size, indicate the relative scale factor
  // Values allowed are [0.5,1.5]
  //UUUV// DORSAL_FIN_SCALE_FACTOR = 1.1

  // If we desire a fin angle of X, we must command X*FIN_ANGLE_SCAL_FACTOR 
      FIN_ANGLE_SCALE_FACTOR = 2.5

  // Indicates the angle of the altimeter face
    //UUUV// ALTIMETER_UP_ANGLE_DEGREES = 21.42
  //MK2// //UUUV// ALTIMETER_UP_ANGLE_DEGREES = 0
      ALTIMETER_UP_ANGLE_DEGREES = 5.42
    //2MP// ALTIMETER_UP_ANGLE_DEGREES = 5.82
  //RT12// ALTIMETER_UP_ANGLE_DEGREES = 0

  // Correct for a steady-state offset in reported depth (be careful with this command)
  //DEPTH_OFFSET = 0  // in meters

  //UUUV// //FOCESC// THRUST_TO_SPEED_FACTOR = 1.0  //scale thrust to speed (sanity check only)

  // Map the desired speed (m/s) to a thrust command
  // Triplets are of the form: <desired_speed(m/s)>:<commanded_thrust(%)>,<estimated_rpm>;
  //UUUV// //FOCESC//   MOTOR_MAP = 0.6:2,400;1.0:5,600;2.5:20,1590;4.0:50,3570;5.0:100;6880 // represents stanard micro
  //MOTOR_MAP = 0.6:4,530;1.0:8,800;2.5:27,2067;4.0:66,4630;4.5:100;6880 // for vehicles needing 1.3x motor map of standard micro
  //UUUV// //FOCESC// //DVL//  MOTOR_MAP = 0.6:5,600;1.0:10,935;2.5:32,2392;4.0:77,5352;4.3:100;6880 // represents survey vehicle (1.5X)

}


ProcessConfig = pNav
{
  AppTick = 20
  CommsTick = 20

  X 	= EKF @ 1.0, LSQ @ 2.0
  Y 	= EKF @ 1.0, LSQ @ 2.0
  Depth = PS_FILTERED 
  Yaw   = IMU
  Heading  = IMU 

  // "pitch" and "roll" and "Z" sensors are not supported in the EKF
  Pitch = IMU 
  Roll  = IMU
  Z	= IMU 

   Altitude = ALT 
//DVL//  Altitude = DVL 
  Speed = EKF
  FIXEDTIDE = 1.0 @ 1.0

   ALWAYS_READ = DESIRED_THRUST,GPS_X,GPS_Y
//DVL//  ALWAYS_READ = DESIRED_THRUST,GPS_X,GPS_Y,DVL_BODY_VEL_X,DVL_BODY_VEL_Y,DVL_WATER_BODY_VEL_X,DVL_WATER_BODY_VEL_Y

  SENSOR_XY = iRiptideMicroUUV -> GPS @ 0,0,0 2.0
    SENSOR_ORIENTATION = iRiptideSpartonIMU -> IMU @ 0,0,0,0 0.1
  //BOSCH// SENSOR_ORIENTATION = iRiptideMicroUUV -> IMU @ 0,0,0,0 0.1
//MK2// SENSOR_ORIENTATION = iRiptideMicroUUV -> IMU @ 0,0,0,0 0.1
  SENSOR_DEPTH = iRiptideMicroUUV -> DEPTH @ 0,0,0,0 0.1
   SENSOR_CONTROL = pMarinePID -> THRUST  @ 0,0.0,0 0.1
   SENSOR_BODY_VEL = pMarinePID -> THRUST_DERIVED_BODY_VEL @ 0,0,0,0 0.1
//DVL//  SENSOR_BODY_VEL = iDVL -> DVL @ 0,0,0,0 0.1
//DVL//  SENSOR_BODY_VEL = iDVL -> DVL_WATER @ 0,0,0,0 0.1


  // Use odometry from thruster for dead reckoning underwater
   THRUST2VELOCITY = TRUE
//UUUV//       THRUST2VELOCITY_GAIN = 0.1
//UUUV// //FOCESC//  THRUST2VELOCITY_GAIN = 1.0
   THRUST2VELOCITY_GAIN = 0.1
//2MP//  THRUST2VELOCITY_GAIN = 0.1
//RT12// THRUST2VELOCITY_GAIN = 0.1

  // Use the Least Squares Filter; the LSQ solution will initialize the EKF
  USELSQ = TRUE
  DISABLELSQUPDATECHECK = TRUE //prevents nav from failing underwater since LSQ will not update

  // Use the Extended Kalman Filter
  USEEKF = TRUE
  MAXEKFPOSITIONUNCERTAINTY = 100  // Max uncertainty in vehicle position before nav fails (m)

  // Mobile vehicle with little sensor lag
  EKF_VEHICLE_TYPE = MOBILE
  EKF_LAG = 0.05

  // Parameters defining the mobility characteristics of the vehicle
  EKF_XY_ACCEL =   4.0  // maximum xy acceleration (m/s^2)
  EKF_Z_ACCEL =    1.0  // maximum z acceleration (m/s^2)
  EKF_H_ACCEL =    3.0  // maximum heading acceleration (rad/s^2)
  EKF_LINEAR_VEL = 8.0  // maximum linear velocity (m/s)
  EKF_H_VEL =      3.0  // maximum heading veolcity (rad/s)

  // scale factors for the above mobility parameters (scale of 0-10 => 0-100%)
  //EKF_XY_DYNAMICS = 10
  //EKF_Z_DYNAMICS = 10
  //EKF_YAW_DYNAMICS = 10

  // max velocities in (m/s) and angular rates in (rad/s)
  // exceeding these causes the Kalman filter to be reset
  EKF_MAX_X_VEL = 5.0
  EKF_MAX_Y_VEL = 5.0
  EKF_MAX_Z_VEL = 2.0
  EKF_MAX_YAW_VEL = 3.0

  // Standard Deviations associated with various observations
  OBS_YAW_STD = 0.2         // yaw observation std (rad)
  OBS_DEPTH_STD = 0.1       // depth observation std (m)
  OBS_XY_STD = 1.0          // XY position observation std (m)
  OBS_BODY_VEL_STD = 0.02   // Body velocity observation std (m/s)
  OBS_THRUST_STD_SCALE_FACTOR = 100  // scale factor to apply to OBS_BODY_VEL_STD for thrust-to-velocity


  // Kalman filter initialization
  EKF_X = 0 
  EKF_Y = 0
  EKF_Z = 0
  EKF_H = 0
  EKF_TIDE = 0
  EKF_SIGMA_XX = 30 
  EKF_SIGMA_YY = 30
  EKF_SIGMA_ZZ = 500
  EKF_SIGMA_HH = 3.0

  // Set up logging for navigation data
  NAV_LOG = TRUE
  NAV_LOG_PATH = "/media/store/data/"
  NAV_LOG_TIMESTAMP = TRUE
}



//------------------------------------------
// pLogger config block

ProcessConfig = pLogger
{
  AppTick = 20
  CommsTick = 20

  SyncLog = false @ 0.1
  AsyncLog = true
  WildCardLogging = true

  // control variables
  Log = DESIRED_ELEVATOR @ 0
  Log = DESIRED_RUDDER @ 0
  Log = DESIRED_THRUST @ 0
  Log = DESIRED_DEPTH @ 0
  Log = DESIRED_HEADING @ 0
  Log = DESIRED_SPEED @ 0
  Log = RT_DORSAL_FIN @ 0
  Log = RT_STARBOARD_FIN @ 0
  Log = RT_PORT_FIN @ 0
  Log = RT_THRUST_SPEED @ 0

  // navigation variables
  Log = NAV_X @ 0
  Log = NAV_Y @ 0
  Log = NAV_DEPTH @ 0
  Log = NAV_ROLL @ 0
  Log = NAV_PITCH @ 0
  Log = NAV_YAW @ 0
  Log = NAV_ALTITUDE @ 0

  // origin
  Log = ORIGIN_LATITUDE @ 0
  Log = ORIGIN_LONGITUDE @ 0

  // pressure sensor
  Log = PS_STATUS @ 0
  Log = PS_PRESSURE @ 0
  Log = PS_TEMP @ 0
  Log = PS_DEPTH @ 0
  Log = PS_FILTERED_DEPTH @ 0
  Log = PS_BAD_PRESSURE @ 0
  Log = PS_BAD_TEMP @ 0

  // IMU 
  Log = IMU_STATUS @ 0
  Log = IMU_SELF_TEST @ 0
  Log = IMU_MODE @ 0
  Log = IMU_ERROR @ 0
  Log = IMU_HW_STATUS @ 0
  Log = IMU_HEADING @ 0
  Log = IMU_ROLL @ 0
  Log = IMU_PITCH @ 0
  Log = IMU_YAW @ 0
  Log = IMU_CALIB_ACCEL @ 0
  Log = IMU_CALIB_GYRO @ 0
  Log = IMU_CALIB_MAG @ 0
  Log = IMU_CALIB_SYS @ 0

  // GPS
  Log = GPS_STATUS @ 0
  Log = GPS_LATITUDE @ 0
  Log = GPS_LONGITUDE @ 0
  Log = GPS_X @ 0
  Log = GPS_Y @ 0
  Log = GPS_QUALITY @ 0
  Log = GPS_FIX @ 0
  Log = GPS_SAT @ 0
  Log = GPS_SPEED @ 0
  Log = GPS_LAST_COMMS @ 0
  Log = GPS_PARSE_ERRORS @ 0

  // Altimeter
  LOG = ALT_STATUS @ 0
  LOG = ALT_ALTITUDE @ 0
  LOG = ALT_LAST_COMMS @ 0
  LOG = ALT_LAST_DATA @ 0
  LOG = ALT_TRIGGER @ 0
  LOG = ALT_PING_RATE @ 0
  LOG = ALT_RANGE @ 0
  LOG = ALT_SOUND_SPEED @ 0

  // Waypoint Mission Variables.
  LOG = WPT_INDEX @ 0

}


ProcessConfig = uRiptideOLEDDisplay
{
   AppTick = 1
   CommsTick = 1

//IXBLUEC3// INS_DVL_PRESENT = TRUE
}

ProcessConfig = iRiptideSpartonIMU
{
   AppTick = 10
   CommsTick = 10

   SERIAL_PORT = "/dev/ttyS5"
   BAUD_RATE = 115200
}

ProcessConfig = pRiptideMOOSMonitor
{
  AppTick  	= 1
  CommsTick	= 1
  VariableMonitorInterval = 1.0
}

ProcessConfig = iDVL
{
  AppTick       = 10
  CommsTick     = 10

  PORT = "/dev/ttyS1"
  BAUDRATE = 115200
  STREAMING = TRUE
  VERBOSE = FALSE
}

ProcessConfig = pRiptideSimpleSafety
{
  AppTick = 1
  CommsTick = 1

  // Depth at which drop weight will be released when exceeded
  MAX_DEPTH_SAFETY = 300

  // The start and end time window in which we will blink the strobe when depth
  // is less than 5m.  Format is in 24h time format hhmm (i.e. 1445 = 2:45pm)
  STROBE_START_TIME = 1930
  STROBE_END_TIME = 0630

  // Enable or Disable Leak detection safety.  Upon leak detection the drop
  // weight will be released and the mission terminated.
  LEAK_DETECTION_ENABLED = TRUE
}


